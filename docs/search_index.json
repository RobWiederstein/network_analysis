[["igraph.html", "Chapter 2 igraph 2.1 Examples 2.2 Layout of Nodes 2.3 Attributes", " Chapter 2 igraph igraph contains 773 functions. Three different plotting mechanisms exist: igraph for two dimensional plots, tkplot for interactive 2-dimensional plotting and rglplot which is for 3-dimensional plotting and is labeled as “experimental.” The igraph functions for two dimensional plots is the focus for the next * chapters. 2.1 Examples 2.1.1 Simple Graphs The simple graph below was created from manual entry using igraph’s graph_from_literal function. Figure 2.1: Graph (a) is two nodes connected by edge, graph (b) is two unconnected nodes, graph (c) is two nodes with a directional edge, graph (d) is two nodes with the directional edge reversed, graph (e) is two nodes with a bidirectional edge, and graph (f) is two nodes connected by a weighted edge. 2.1.2 Notable Graphs Figure 2.2: Nine of 31 ‘Notable Graphs’ from ’make_graph()` 2.1.3 Complicated Graph The complicated graph below was created from the Les Miserable resident dataset in igraph. (Knuth 1993) The data contains 77 nodes and 254 edges. Figure 2.3: Network graph of the coappearnce of characters in Les Miserable. 2.2 Layout of Nodes Nodes may be laid out in a variety of ways and many algorithms are available, depending on the data and the analyst’s personal preference. “It is important to realize that the information in graph layouts is contained in the pattern of which nodes are connected to which others. The locations . . . are chosen based on essentially aesthetic criteria.” (Borgatti, Everett, and Johnson 2018) According to the igraph documentation, 21 available layouts are available and include: Table 2.1: Available layouts for nodes in igraph. add_layout_ component_wise layout_as_star layout_as_tree layout_in_circle layout_nicely layout_on_grid layout_on_sphere layout_randomly layout_with_dh layout_with_fr layout_with_gem layout_with_graphopt layout_with_kk layout_with_lgl layout_with_mds layout_with_sugiyama layout_ merge_coords norm_coords normalize Plots were randomly generated from an adjacency matrix as illustrated by R-graph-gallery. The layout_nicely function is the default. (verify). The function uses the layout_with_fr with graphs less than 1,000 vertices and the layout_with_drl for graphs greater than 1,000 vertices. Figure 2.4: Examples of available layouts. 2.3 Attributes Any chart is comprised of geoms. igraph allows for the color, size, shape to be set in of two ways. The first method is to supply named arguments to the plotting command, in the this case plot.igraph. The second method is to set the attributes via assignment to the vertex, edge or graph. According to the manual, assignments using the second method do not require “vertex” or “edge” to be prepended. #First Method -- supply named arguments to plot plot.igraph(make_graph(&quot;Bull&quot;), vertex.shape = &quot;square&quot; ) #Second Method -- set attribute g &lt;- make_graph(&quot;Bull&quot;) %&gt;% set_vertex_attr(name = &quot;shape&quot;, value = &quot;square&quot;) plot(g) 2.3.1 Vertices Figure 2.5: Selected node attributes. Figure 2.6: Additional node color palettes. 2.3.1.1 Shapes 2.3.1.2 Sizes 2.3.1.3 Colors The argument to set the vertex color in the plot.igraph function is vertex.color. Like plots in base R, color may be set by a number (integer) or name (character) with the name being preferred. The default palette can be retrieved through ?igraph::categorical_pal(n). The colors are visible to those who are color-blind and is eight colors. For plot.igraph and integer values, the default igraph palette is used (see the ‘palette’ parameter below. Note that this is different from the R palette. If you don’t want (some) vertices to have any color, supply NA as the color name. The default value is “SkyBlue2”. 2.3.2 Edges Figure 2.7: Selected edge attributes. References "]]
