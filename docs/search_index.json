[["index.html", "Network Analysis in R Preface 0.1 Why Read this Book 0.2 Purpose 0.3 Collection 0.4 Prerequisites 0.5 Disclaimer", " Network Analysis in R Robert Wiederstein 2020-12-28 Preface 0.1 Why Read this Book Network analysis is a crucial strategy in understanding the direction and strength of connections between people, places and ideas. Visual representation of networks can speed the discovery process in working with data. 0.2 Purpose The purpose of this book is to speed the conversion of a traditional dataframe to a network diagram with nodes and vertices. Some discusson of basic computations will be included, but formulas are omitted unless necessary for understanding. Network analysis is challenging due to its reliance on unfamiliar data structures. 0.3 Collection What follows is admittedly not the most original or insightful work on networks. It is an attempt to collect tutorials from disparate packages, software and websites in a single place. Attribution will, of course, be given where known. 0.4 Prerequisites A working knowledge of R is necessary including how to obtain and load packages, how to manipulate basic data structures like lists and dataframes and how to plot and save graphs in multiple formats. Methods and packages in the tidyverse are preferred where available and Rstudio is the development environment of choice. 0.5 Disclaimer I have no education or background in statistics, informatics or network analysis. Reliance upon any representation within this publication should occur, if at all, only after verification from other reliable sources and in consultation with someone with a relevant background. "],["intro.html", "Chapter 1 Introduction 1.1 Terms 1.2 Input formats 1.3 Datasets", " Chapter 1 Introduction 1.1 Terms “A network is not just a metaphor: it is a precise, mathematical construct of nodes (vertices, actors) N and edges (ties, relations) E that can be directed or undirected. We can include information (attributes) on the nodes as well as the edges.” (Jasney 2018) Figure 1.1: A network consisting of nodes, N, and directed edges E. 1.2 Input formats Building a network graph is challenging because of the number of potential input types. Users must first distinguish whether the input is an adjacency matrix, incidence matrix, or edge list. Then, the user must know if the graph is directed or undirected, weighted or unweighted. (Holtz 2020) 1.2.1 Adjacency matrix An adjacency matrix is a square matrix where the number of rows and columns are the same. igraph can read an adjacency matrix using the graph_from_adjacency_matrix() function. Table 1.1: Adjacency Matrix. A ‘0’ denotes no connection. A B C D E F A 0 1 0 0 0 0 B 0 0 0 0 0 0 C 0 0 0 1 0 0 D 1 0 0 0 0 0 E 0 0 0 0 2 2 F 2 0 1 0 0 0 Figure 1.2: Network plot from adjacency matrix 1.2.2 Sparse matrix The function, graph_from_adjacency_matrix(), also accepts a sparse matrix which is sometimes preferred to minimize file sizes and conserve system resources on large datasets. ## 5 x 5 sparse Matrix of class &quot;dgCMatrix&quot; ## ## [1,] . . 1 1 1 ## [2,] 1 1 1 . . ## [3,] 1 . . . 1 ## [4,] 1 1 1 . . ## [5,] 1 . 1 . 1 Figure 1.3: Network plot from sparse matrix. 1.2.3 Incidence matrix The rows and colunms of an incidence matrix do not have to be equal. Its shape can be rectangular in addition to square. igraph can read an incidence matrix using the graph_from_incidence_matrix(). Table 1.2: Example incidency matrix. a b c d e A 0 2 0 2 0 B 2 1 0 0 1 C 0 1 1 2 0 D 1 2 1 0 0 E 0 2 1 0 1 F 2 0 1 0 1 Figure 1.4: Network plot from incidency matrix. 1.2.4 Edge list An edge list has 2 columns. Each observation represents a connection between two things. The two column names are alternatively named (1) an origin and a destination or (2)a source and target, depending on the package used. The column names are often the key to a successful importation of the data. igraph imports an edge list graph_from_edgelist() function. Table 1.3: Example Edgelist. origin destination A C D A A E B E E B C F F F B B C A Figure 1.5: Plot generated from edgelist. 1.2.5 Dataframe distinguished “A data frame may for many purposes be regarded as a matrix with columns possibly of differing modes and attributes.” (R Core Team 2020) In other words, a matrix must contain all of the same data type while a dataframe can have columns with differing data types – numeric, character, factor, etc. Different authors and packages require one or the other and many coerce to the required data type internally without notification to the user. Matrices may offer greater computational efficiency although it may depend on the data types included. (find cite) 1.3 Datasets igraphdata contains a number of datasets that illustrate the use of network analysis. The command data(package=&quot;igraphdata&quot;) lists the datasets available. After loading the package, data(&quot;karate&quot;) will load, for example, the “karate” dataset. Table 1.4: Datasets included in igraphdata package. Item Title Koenigsberg Bridges of Koenigsberg from Euler’s times UKfaculty Friendship network of a UK university faculty USairports US airport network, 2010 December enron Enron Email Network foodwebs A collection of food webs immuno Immunoglobulin interaction network karate Zachary’s karate club network kite Krackhardt’s kite macaque Visuotactile brain areas and connections rfid Hospital encounter network data yeast Yeast protein interaction network References "],["igraph.html", "Chapter 2 igraph 2.1 Examples 2.2 Importation of Datasets 2.3 Layout of Nodes 2.4 Attributes", " Chapter 2 igraph igraph contains 773 functions. Three different plotting mechanisms exist: igraph for two dimensional plots, tkplot for interactive 2-dimensional plotting and rglplot which is for 3-dimensional plotting and is labeled as “experimental.” 2.1 Examples 2.1.1 Simple The simple graph below was created from manual entry using igraph’s graph_from_literal function. Figure 2.1: Graph (a) is two nodes connected by edge, graph (b) is two unconnected nodes, graph (c) is two nodes with a directional edge, graph (d) is two nodes with the directional edge reversed, graph (e) is two nodes with a bidirectional edge, and graph (f) is two nodes connected by a weighted edge. 2.1.2 Complicated The complicated graph below was created from the Les Miserable resident dataset in igraph. The data contains 77 nodes and 254 edges. Figure 2.2: Network graph of the coappearnce of characters in Les Miserable. 2.2 Importation of Datasets 2.3 Layout of Nodes Nodes may be laid out in a variety of ways and many algorithms are available, depending on the data and the analyst’s personal preference. “It is important to realize that the information in graph layouts is contained in the pattern of which nodes are connected to which others. The locations . . . are chosen based on essentially aesthetic criteria.” (Borgatti, Everett, and Johnson 2018) According to the igraph documentation, 21 available layouts are available and include: Table 2.1: Available layouts for nodes in igraph. add_layout_ component_wise layout_as_star layout_as_tree layout_in_circle layout_nicely layout_on_grid layout_on_sphere layout_randomly layout_with_dh layout_with_fr layout_with_gem layout_with_graphopt layout_with_kk layout_with_lgl layout_with_mds layout_with_sugiyama layout_ merge_coords norm_coords normalize Plots were randomly generated from an adjacency matrix as illustrated by R-graph-gallery. The layout_nicely function is the default. (verify). The function uses the layout_with_fr with graphs less than 1,000 vertices and the layout_with_drl for graphs greater than 1,000 vertices. Figure 2.3: Examples of available layouts. 2.4 Attributes Any chart is comprised of geoms. igraph allows for the color, size, shape to be set in of two ways. The first method is to supply named arguments to the plotting command, in the this case plot.igraph. 2.4.1 Vertices Figure 2.4: Selected node attributes. Figure 2.5: Additional node color palettes. 2.4.1.1 Shapes 2.4.1.2 Sizes 2.4.1.3 Colors The argument to set the vertex color in the plot.igraph function is vertex.color. Like plots in base R, color may be set by a number (integer) or name (character) with the name being preferred. The default palette can be retrieved through ?igraph::categorical_pal(n). The colors are visible to those who are color-blind and is eight colors. For plot.igraph and integer values, the default igraph palette is used (see the ‘palette’ parameter below. Note that this is different from the R palette. If you don’t want (some) vertices to have any color, supply NA as the color name. The default value is “SkyBlue2”. 2.4.2 Edges Figure 2.6: Selected edge attributes. References "],["first-graphs.html", "Chapter 3 First Graphs 3.1 Les Miserable Dataset 3.2 Stop light 3.3 Les Miserabe", " Chapter 3 First Graphs 3.1 Les Miserable Dataset # Load igraph library(igraph) # Read data lesmis &lt;- read.csv(&quot;https://raw.githubusercontent.com/meefen/sna-ed/master/assets/lesmis/lesmis.csv&quot;) # check the head (first 6 rows) of the dataset head(lesmis) ## Source Target weight ## 1 1 0 1 ## 2 2 0 8 ## 3 3 0 10 ## 4 3 2 6 ## 5 4 0 1 ## 6 5 0 1 # Create a graph using the graph_from_data_frame function g &lt;- graph_from_data_frame(lesmis) # Plot the graph plot(g) # make the graph a little prettier plot(g, edge.arrow.size=.2, vertex.label=NA, vertex.size=8) 3.2 Stop light library(sigmajs) library(tibble) edges &lt;- tibble(id = rep(&quot;1&quot;, 3), source = rep(&quot;1&quot;, 3), target = as.character(c(2:4)) ) nodes &lt;- tibble(id = as.character(1:4), label = c(&quot;light&quot;, &quot;red&quot;, &quot;yellow&quot;, &quot;green&quot;), time = c(100, 30, 10, 20) ) sigmajs() %&gt;% sg_nodes(nodes, id, label, time) %&gt;% sg_edges(edges, id, source, target) 3.3 Les Miserabe "],["sigma.html", "Chapter 4 Sigma JS 4.1 Stop light", " Chapter 4 Sigma JS #example for ?sigmajs::sigmajs library(sigmajs) nodes &lt;- sg_make_nodes() edges &lt;- sg_make_edges(nodes) sigmajs() %&gt;% sg_nodes(nodes, id, label, size, color) %&gt;% sg_edges(edges, id, source, target) 4.1 Stop light library(sigmajs) library(tibble) edges &lt;- tibble(id = rep(&quot;1&quot;, 3), source = rep(&quot;1&quot;, 3), target = as.character(c(2:4)) ) nodes &lt;- tibble(id = as.character(1:4), label = c(&quot;light&quot;, &quot;red&quot;, &quot;yellow&quot;, &quot;green&quot;), time = c(100, 30, 10, 20) ) sigmajs() %&gt;% sg_nodes(nodes, id, label, time) %&gt;% sg_edges(edges, id, source, target) "],["starwars.html", "Chapter 5 Case Study Star Wars", " Chapter 5 Case Study Star Wars Great analysis of Star Wars and the coappearnce of characters. Data was prepared by Evelina Gabasova. The data was available on a github repo.(???) "],["glossary.html", "Chapter 6 Glossary", " Chapter 6 Glossary Attributes are a characteristic of the node or edge that is often designated by color, size, or shape of the object. For example, a dashed line for an edge or a blue circle for a node. Nodes are also actors or vertices. They are things like people, places, ideas that have some connection. In mathmatical formulas, they often take the variable \\(N\\). Degree the number of nodes adjacent to the node under evaluation or the number of lines incident to it. Diameter is the maximum number of edges. Edges are ties, relations or connections between nodes. Edges are often designated as \\(E\\). Indegree is the number of received ties. Networks Network objects is a class of objects in R designed specifically for network analysis. They store an adjacency matrix or an edgelist as well as metadata. Outdegree the number of sent ties. Directed networks "]]
